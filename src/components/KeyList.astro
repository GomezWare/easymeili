<div x-data="keyListData" class="bg-gradient-to-br from-white to-gray-50 rounded-xl shadow-lg border border-gray-100 p-4 sm:p-6 lg:p-8">
  <!-- Toast notifications -->
  <div class="fixed top-4 right-4 z-50 space-y-2">
    <template x-for="toast in toasts" :key="toast.id">
      <div 
        x-show="toast.visible" 
        x-transition:enter="transition ease-out duration-300"
        x-transition:enter-start="transform translate-x-full opacity-0"
        x-transition:enter-end="transform translate-x-0 opacity-100"
        x-transition:leave="transition ease-in duration-200"
        x-transition:leave-start="transform translate-x-0 opacity-100"
        x-transition:leave-end="transform translate-x-full opacity-0"
        class="max-w-sm w-full bg-white rounded-lg shadow-lg border border-gray-200 p-4"
        :class="{
          'border-green-200 bg-green-50': toast.type === 'success',
          'border-red-200 bg-red-50': toast.type === 'error',
          'border-yellow-200 bg-yellow-50': toast.type === 'warning'
        }"
      >
        <div class="flex items-start">
          <div class="flex-shrink-0">
            <div class="w-6 h-6 rounded-full flex items-center justify-center"
                 :class="{
                   'bg-green-100': toast.type === 'success',
                   'bg-red-100': toast.type === 'error',
                   'bg-yellow-100': toast.type === 'warning'
                 }">
              <svg x-show="toast.type === 'success'" class="w-4 h-4 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              <svg x-show="toast.type === 'error'" class="w-4 h-4 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
              <svg x-show="toast.type === 'warning'" class="w-4 h-4 text-yellow-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
              </svg>
            </div>
          </div>
          <div class="ml-3 flex-1">
            <p class="text-sm font-medium"
               :class="{
                 'text-green-800': toast.type === 'success',
                 'text-red-800': toast.type === 'error',
                 'text-yellow-800': toast.type === 'warning'
               }"
               x-text="toast.message"></p>
          </div>
          <div class="ml-4 flex-shrink-0">
            <button @click="removeToast(toast.id)" class="text-gray-400 hover:text-gray-600">
              <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>
    </template>
  </div>

  <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6 sm:mb-8">
    <div>
      <h2 class="text-xl sm:text-2xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">Claves de API</h2>
      <p class="text-gray-500 mt-1 text-sm sm:text-base">Gestiona las claves de acceso a tus índices</p>
    </div>
    <button @click="createNewKey()" class="bg-gradient-to-r from-indigo-600 to-purple-600 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-lg font-medium hover:from-indigo-700 hover:to-purple-700 transform hover:scale-105 transition-all duration-200 shadow-lg hover:shadow-xl flex items-center justify-center space-x-2 text-sm sm:text-base">
      <svg class="w-4 h-4 sm:w-5 sm:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z"></path>
      </svg>
      <span>Nueva Clave</span>
    </button>
  </div>
  
  <!-- Search bar -->
  <div class="mb-6 sm:mb-8">
    <div class="relative">
      <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
        <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
      </div>
      <input 
        type="text" 
        x-model="searchQuery" 
        placeholder="Buscar claves por nombre o índice..." 
        class="block w-full pl-10 pr-3 py-2 sm:py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 bg-white shadow-sm transition-all duration-200 text-sm sm:text-base"
      />
      <div x-show="searchQuery" class="absolute inset-y-0 right-0 pr-3 flex items-center">
        <button @click="searchQuery = ''" class="text-gray-400 hover:text-gray-600">
          <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>
    <div x-show="searchQuery" class="mt-2 text-sm text-gray-500">
      <span x-text="`${filteredKeys.length} de ${keys.length} claves encontradas`"></span>
    </div>
  </div>
  
  <!-- Loading state -->
  <div x-show="loading" class="text-center py-8 sm:py-12">
    <div class="inline-block animate-spin rounded-full h-10 w-10 sm:h-12 sm:w-12 border-4 border-indigo-200 border-t-indigo-600"></div>
    <p class="mt-4 text-gray-600 font-medium text-sm sm:text-base">Cargando claves...</p>
  </div>
  
  <!-- Error state -->
  <div x-show="error" class="bg-gradient-to-r from-red-50 to-pink-50 border border-red-200 rounded-xl p-4 sm:p-6 mb-4 sm:mb-6 shadow-sm">
    <div class="flex items-start">
      <div class="flex-shrink-0">
        <div class="w-8 h-8 sm:w-10 sm:h-10 bg-red-100 rounded-full flex items-center justify-center">
          <svg class="h-5 w-5 sm:h-6 sm:w-6 text-red-500" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
          </svg>
        </div>
      </div>
      <div class="ml-3 sm:ml-4">
        <h3 class="text-base sm:text-lg font-semibold text-red-800">Error al cargar claves</h3>
        <div class="mt-2 text-red-700 text-sm sm:text-base">
          <p x-text="error"></p>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Keys list -->
  <div x-show="!loading && !error" class="space-y-3 sm:space-y-4">
    <template x-for="key in filteredKeys" :key="key.key">
      <div class="bg-white rounded-xl border border-gray-200 p-4 sm:p-6 hover:shadow-lg hover:border-indigo-200 transition-all duration-200 transform hover:-translate-y-1">
        <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
          <div class="flex-1">
            <div class="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-0 sm:mb-2">
              <div class="flex items-center">
                <div class="w-3 h-3 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full mr-3"></div>
                <span class="text-base sm:text-lg font-semibold text-gray-800" x-text="key.name || 'Clave sin nombre'"></span>
              </div>
              <span class="ml-0 sm:ml-3 px-3 py-1 bg-green-100 text-green-700 text-xs sm:text-sm font-medium rounded-full self-start sm:self-auto" x-text="key.actions.join(', ')"></span>
            </div>
            <div class="flex flex-col sm:flex-row sm:items-center text-xs sm:text-sm text-gray-500 gap-2 sm:gap-4 mt-2 sm:mt-0">
              <div class="flex items-center">
                <svg class="w-3 h-3 sm:w-4 sm:h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
                <span x-text="`Creada: ${formatDate(key.createdAt)}`"></span>
              </div>
              <div class="flex items-center">
                <svg class="w-3 h-3 sm:w-4 sm:h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                </svg>
                <span x-text="`Índices: ${key.indexes.join(', ') || 'Todos'}`"></span>
              </div>
            </div>
            <div class="mt-2">
              <div class="flex items-center space-x-2">
                <span class="text-xs text-gray-400">Clave:</span>
                <code class="text-xs bg-gray-100 px-2 py-1 rounded font-mono text-gray-700" x-text="key.key.substring(0, 20) + '...'"></code>
                <button @click="copyToClipboard(key.key)" class="text-indigo-600 hover:text-indigo-800 text-xs">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>
          <div class="flex flex-wrap items-center gap-2 sm:gap-3">
            <button @click="showKeyDetails(key)" class="bg-indigo-50 text-indigo-700 px-3 sm:px-4 py-2 rounded-lg font-medium hover:bg-indigo-100 transition-colors duration-200 flex items-center space-x-1 sm:space-x-2 text-xs sm:text-sm">
              <svg class="w-3 h-3 sm:w-4 sm:h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
              </svg>
              <span class="hidden sm:inline">Ver detalles</span>
              <span class="sm:hidden">Ver</span>
            </button>
            <button @click="deleteKey(key.key)" class="bg-red-50 text-red-600 px-3 sm:px-4 py-2 rounded-lg font-medium hover:bg-red-100 transition-colors duration-200 flex items-center space-x-1 sm:space-x-2 text-xs sm:text-sm">
              <svg class="w-3 h-3 sm:w-4 sm:h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
              </svg>
              <span class="hidden sm:inline">Eliminar</span>
              <span class="sm:hidden">Eliminar</span>
            </button>
          </div>
        </div>
      </div>
    </template>
    
    <!-- Empty state -->
    <div x-show="filteredKeys.length === 0" class="text-center py-12 sm:py-16">
      <div class="w-20 h-20 sm:w-24 sm:h-24 bg-gradient-to-br from-green-100 to-emerald-100 rounded-full flex items-center justify-center mx-auto mb-4 sm:mb-6">
        <svg class="w-10 h-10 sm:w-12 sm:h-12 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z" />
        </svg>
      </div>
      <h3 class="text-lg sm:text-xl font-semibold text-gray-700 mb-2" x-text="searchQuery ? 'No se encontraron claves' : 'No hay claves'"></h3>
      <p class="text-gray-500 mb-4 sm:mb-6 text-sm sm:text-base" x-text="searchQuery ? 'Intenta con otros términos de búsqueda' : 'Crea tu primera clave para comenzar a gestionar el acceso a tus índices.'"></p>
      <button x-show="!searchQuery" @click="createNewKey()" class="bg-gradient-to-r from-indigo-600 to-purple-600 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-lg font-medium hover:from-indigo-700 hover:to-purple-700 transform hover:scale-105 transition-all duration-200 text-sm sm:text-base">
        Crear primera clave
      </button>
    </div>
  </div>
  
  <!-- Key details modal -->
  <div x-show="showKeyModal" x-cloak class="fixed inset-0 bg-black/50 overflow-y-auto h-full w-full z-50 backdrop-blur-sm">
    <div class="relative top-4 sm:top-10 mx-auto p-4 sm:p-6 border w-11/12 md:w-4/5 lg:w-3/4 xl:w-2/3 shadow-2xl rounded-2xl bg-white">
      <div class="mt-3">
        <div class="flex items-center justify-between mb-4 sm:mb-6">
          <div>
            <h3 class="text-xl sm:text-2xl font-bold text-gray-900" x-text="`Detalles de la clave`"></h3>
            <p class="text-gray-500 mt-1 text-sm sm:text-base">Información completa de la clave de API</p>
          </div>
          <button @click="showKeyModal = false" class="text-gray-400 hover:text-gray-600 p-2 hover:bg-gray-100 rounded-lg transition-colors duration-200">
            <svg class="h-5 w-5 sm:h-6 sm:w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        <div class="space-y-4">
          <div class="bg-gray-50 rounded-lg p-4">
            <h4 class="font-semibold text-gray-800 mb-2">Clave completa</h4>
            <div class="flex items-center space-x-2">
              <code class="flex-1 bg-white px-3 py-2 rounded border font-mono text-sm break-all" x-text="selectedKey?.key"></code>
              <button @click="copyToClipboard(selectedKey?.key)" class="bg-indigo-600 text-white px-3 py-2 rounded hover:bg-indigo-700 transition-colors">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                </svg>
              </button>
            </div>
          </div>
          
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div class="bg-gray-50 rounded-lg p-4">
              <h4 class="font-semibold text-gray-800 mb-2">Nombre</h4>
              <p class="text-gray-600" x-text="selectedKey?.name || 'Sin nombre'"></p>
            </div>
            
            <div class="bg-gray-50 rounded-lg p-4">
              <h4 class="font-semibold text-gray-800 mb-2">Fecha de creación</h4>
              <p class="text-gray-600" x-text="formatDate(selectedKey?.createdAt)"></p>
            </div>
            
            <div class="bg-gray-50 rounded-lg p-4">
              <h4 class="font-semibold text-gray-800 mb-2">Acciones permitidas</h4>
              <div class="flex flex-wrap gap-1">
                <template x-for="action in selectedKey?.actions" :key="action">
                  <span class="px-2 py-1 bg-green-100 text-green-700 text-xs rounded-full" x-text="action"></span>
                </template>
              </div>
            </div>
            
            <div class="bg-gray-50 rounded-lg p-4">
              <h4 class="font-semibold text-gray-800 mb-2">Índices permitidos</h4>
              <div class="flex flex-wrap gap-1">
                <template x-for="index in selectedKey?.indexes" :key="index">
                  <span class="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full" x-text="index"></span>
                </template>
                <span x-show="!selectedKey?.indexes || selectedKey.indexes.length === 0" class="px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full">Todos los índices</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Create key modal -->
  <div x-show="showCreateModal" x-cloak class="fixed inset-0 bg-black/50 overflow-y-auto h-full w-full z-50 backdrop-blur-sm">
    <div class="relative top-4 sm:top-10 mx-auto p-4 sm:p-6 border w-11/12 md:w-4/5 lg:w-3/4 xl:w-2/3 shadow-2xl rounded-2xl bg-white">
      <div class="mt-3">
        <div class="flex items-center justify-between mb-6">
          <div>
            <h3 class="text-xl sm:text-2xl font-bold text-gray-900">Crear Nueva Clave</h3>
            <p class="text-gray-500 mt-1 text-sm sm:text-base">Configura los permisos y acceso de la nueva clave</p>
          </div>
          <button @click="closeCreateModal()" class="text-gray-400 hover:text-gray-600 p-2 hover:bg-gray-100 rounded-lg transition-colors duration-200">
            <svg class="h-5 w-5 sm:h-6 sm:w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        <form @submit.prevent="submitCreateKey()" class="space-y-6">
          <!-- Basic Information -->
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Nombre de la clave</label>
              <input 
                type="text" 
                x-model="newKey.name" 
                placeholder="Ej: Clave de desarrollo"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Descripción</label>
              <input 
                type="text" 
                x-model="newKey.description" 
                placeholder="Ej: Clave para aplicación de desarrollo"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              />
            </div>
          </div>
          
          <!-- Indexes Selection -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-3">Índices permitidos</label>
            <div class="space-y-2 max-h-40 overflow-y-auto border border-gray-200 rounded-lg p-3">
              <label class="flex items-center">
                <input 
                  type="checkbox" 
                  x-model="newKey.allIndexes"
                  @change="toggleAllIndexes()"
                  class="rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
                />
                <span class="ml-2 text-sm text-gray-700">Todos los índices</span>
              </label>
              <template x-for="index in availableIndexes" :key="index.uid">
                <label class="flex items-center">
                  <input 
                    type="checkbox" 
                    :value="index.uid"
                    x-model="newKey.selectedIndexes"
                    :disabled="newKey.allIndexes"
                    class="rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
                  />
                  <span class="ml-2 text-sm text-gray-700" x-text="index.uid"></span>
                  <span class="ml-2 text-xs text-gray-500" x-text="`(${index.totalDocuments || 0} docs)`"></span>
                </label>
              </template>
            </div>
          </div>
          
          <!-- Actions Selection -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-3">Acciones permitidas</label>
            <div class="space-y-2 mb-3">
              <label class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50">
                <input 
                  type="checkbox" 
                  x-model="newKey.allActions"
                  @change="toggleAllActions()"
                  class="rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
                />
                <div class="ml-3">
                  <span class="text-sm font-medium text-gray-700">Seleccionar todas las acciones</span>
                  <p class="text-xs text-gray-500">Concede acceso completo a todas las funcionalidades</p>
                </div>
              </label>
            </div>
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
              <template x-for="action in availableActions" :key="action.value">
                <label class="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50">
                  <input 
                    type="checkbox" 
                    :value="action.value"
                    x-model="newKey.selectedActions"
                    :disabled="newKey.allActions"
                    class="rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
                  />
                  <div class="ml-3">
                    <span class="text-sm font-medium text-gray-700" x-text="action.label"></span>
                    <p class="text-xs text-gray-500" x-text="action.description"></p>
                  </div>
                </label>
              </template>
            </div>
          </div>
          
          <!-- Expiration -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Fecha de expiración (opcional)</label>
            <input 
              type="datetime-local" 
              x-model="newKey.expiresAt"
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            />
          </div>
          
          <!-- Buttons -->
          <div class="flex justify-end space-x-3 pt-4 border-t">
            <button 
              type="button"
              @click="closeCreateModal()"
              class="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
            >
              Cancelar
            </button>
            <button 
              type="submit"
              :disabled="!newKey.selectedActions.length"
              class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              Crear Clave
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
  
  <!-- Delete Key Confirmation Modal -->
  <div x-show="showDeleteModal" x-cloak class="fixed inset-0 bg-black/50 overflow-y-auto h-full w-full z-50 backdrop-blur-sm">
    <div class="relative top-4 sm:top-10 mx-auto p-4 sm:p-6 border w-11/12 md:w-4/5 lg:w-3/4 xl:w-2/3 shadow-2xl rounded-2xl bg-white">
      <div class="mt-3">
        <div class="flex items-center justify-between mb-4 sm:mb-6">
          <div>
            <h3 class="text-xl sm:text-2xl font-bold text-red-600">Eliminar Clave</h3>
            <p class="text-gray-500 mt-1 text-sm sm:text-base">Esta acción no se puede deshacer</p>
          </div>
          <button @click="closeDeleteModal()" class="text-gray-400 hover:text-gray-600 p-2 hover:bg-gray-100 rounded-lg transition-colors duration-200">
            <svg class="h-5 w-5 sm:h-6 sm:w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        <div class="space-y-4 sm:space-y-6">
          <div class="bg-red-50 border border-red-200 rounded-lg p-4">
            <div class="flex items-start">
              <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                </svg>
              </div>
              <div class="ml-3">
                <h4 class="text-sm font-medium text-red-800">¿Estás seguro?</h4>
                <p class="text-sm text-red-700 mt-1">
                  Estás a punto de eliminar la clave <strong x-text="keyToDelete?.name || 'sin nombre'"></strong>. 
                  Esta acción eliminará permanentemente la clave de API.
                </p>
                <div class="mt-2 p-2 bg-white rounded border">
                  <p class="text-xs text-gray-600">Clave: <code class="text-xs" x-text="keyToDelete?.key?.substring(0, 20) + '...'"></code></p>
                </div>
              </div>
            </div>
          </div>
          
          <div class="flex flex-col sm:flex-row gap-3 pt-4">
            <button 
              type="button" 
              @click="confirmDeleteKey()" 
              class="flex-1 bg-red-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-red-700 transition-colors duration-200"
            >
              <span x-show="!deletingKey">Eliminar Clave</span>
              <span x-show="deletingKey" class="flex items-center justify-center">
                <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Eliminando...
              </span>
            </button>
            <button 
              type="button" 
              @click="closeDeleteModal()" 
              class="flex-1 bg-gray-100 text-gray-700 px-4 py-2 rounded-lg font-medium hover:bg-gray-200 transition-colors duration-200"
            >
              Cancelar
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import Alpine from "alpinejs";

  interface Key {
    key: string;
    name?: string;
    description?: string;
    actions: string[];
    indexes: string[];
    expiresAt?: string;
    createdAt: string;
  }

  interface Toast {
    id: string;
    type: 'success' | 'error' | 'warning';
    message: string;
    visible: boolean;
  }

  const keyListData = () => ({
    keys: [] as Key[],
    loading: true,
    error: null as string | null,
    showKeyModal: false,
    selectedKey: null as Key | null,
    toasts: [] as Toast[],
    searchQuery: '',
    showCreateModal: false,
    showDeleteModal: false,
    deletingKey: false,
    keyToDelete: null as Key | null,
    availableIndexes: [] as any[],
    newKey: {
      name: '',
      description: '',
      allIndexes: false,
      allActions: false,
      selectedIndexes: [] as string[],
      selectedActions: [] as string[],
      expiresAt: '',
    },
    
    availableActions: [
      { value: 'documents.add', label: 'Añadir documentos', description: 'Permite añadir documentos a los índices' },
      { value: 'documents.delete', label: 'Eliminar documentos', description: 'Permite eliminar documentos de los índices' },
      { value: 'documents.get', label: 'Obtener documentos', description: 'Permite consultar documentos de los índices' },
      { value: 'indexes.get', label: 'Ver índices', description: 'Permite listar y ver información de índices' },
      { value: 'indexes.create', label: 'Crear índices', description: 'Permite crear nuevos índices' },
      { value: 'indexes.delete', label: 'Eliminar índices', description: 'Permite eliminar índices existentes' },
      { value: 'indexes.update', label: 'Actualizar índices', description: 'Permite modificar configuración de índices' },
    ],
    
    get filteredKeys() {
      if (!this.searchQuery.trim()) {
        return this.keys;
      }
      const query = this.searchQuery.toLowerCase().trim();
      return this.keys.filter(key => 
        (key.name && key.name.toLowerCase().includes(query)) ||
        key.indexes.some(index => index.toLowerCase().includes(query))
      );
    },
    
    addToast(type: 'success' | 'error' | 'warning', message: string) {
      const id = Math.random().toString(36).substr(2, 9);
      const toast: Toast = {
        id,
        type,
        message,
        visible: true
      };
      
      this.toasts.push(toast);
      
      // Auto remove after 5 seconds
      setTimeout(() => {
        this.removeToast(id);
      }, 5000);
    },
    
    removeToast(id: string) {
      const toast = this.toasts.find(t => t.id === id);
      if (toast) {
        toast.visible = false;
        setTimeout(() => {
          this.toasts = this.toasts.filter(t => t.id !== id);
        }, 200);
      }
    },
    
    formatDate(dateString: string): string {
      try {
        const date = new Date(dateString);
        if (isNaN(date.getTime())) {
          return 'Fecha inválida';
        }
        return date.toLocaleDateString('es-ES', {
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit'
        });
      } catch (error) {
        return 'Fecha inválida';
      }
    },
    
    async copyToClipboard(text: string) {
      try {
        await navigator.clipboard.writeText(text);
        this.addToast('success', 'Clave copiada al portapapeles');
      } catch (err) {
        this.addToast('error', 'Error al copiar la clave');
      }
    },
    
    async init() {
      await this.loadKeys();
      await this.loadAvailableIndexes();
    },
    
    async loadKeys() {
      this.loading = true;
      this.error = null;
      
      try {
        const response = await fetch('/api/keys');
        if (!response.ok) {
          throw new Error(`Error ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        this.keys = data.results || [];
      } catch (err: unknown) {
        console.error('Error loading keys:', err);
        this.error = err instanceof Error ? err.message : 'Error al cargar las claves';
      } finally {
        this.loading = false;
      }
    },
    
    async loadAvailableIndexes() {
      try {
        const response = await fetch('/api/indexes');
        if (response.ok) {
          const data = await response.json();
          this.availableIndexes = data.results || [];
        }
      } catch (err) {
        console.error('Error loading available indexes:', err);
      }
    },
    
    async createNewKey() {
      this.showCreateModal = true;
      // Marcar todos los índices por defecto
      this.newKey.selectedIndexes = this.availableIndexes.map(index => index.uid);
    },
    
    async deleteKey(keyValue: string) {
      this.showDeleteModal = true;
      this.keyToDelete = this.keys.find(key => key.key === keyValue) || null;
    },
    
    showKeyDetails(key: Key) {
      this.selectedKey = key;
      this.showKeyModal = true;
    },
    
    closeCreateModal() {
      this.showCreateModal = false;
      this.resetNewKeyForm();
    },
    
    async submitCreateKey() {
      if (!this.newKey.selectedActions.length) {
        this.addToast('error', 'Debes seleccionar al menos una acción');
        return;
      }
      
      try {
        // Preparar los datos de la clave
        const keyData: any = {
          name: this.newKey.name || undefined,
          description: this.newKey.description || undefined,
          actions: this.newKey.selectedActions,
          indexes: this.newKey.allIndexes ? [] : this.newKey.selectedIndexes,
        };
        
        // Añadir fecha de expiración si está definida
        if (this.newKey.expiresAt) {
          keyData.expiresAt = this.newKey.expiresAt;
        }
        
        const response = await fetch('/api/keys', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(keyData),
        });
        
        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.error || 'Error al crear la clave');
        }
        
        const createdKey = await response.json();
        
        // Recargar claves
        await this.loadKeys();
        
        // Cerrar modal y limpiar formulario
        this.closeCreateModal();
        this.resetNewKeyForm();
        
        this.addToast('success', `Clave "${createdKey.name || 'sin nombre'}" creada correctamente`);
      } catch (err: unknown) {
        console.error('Error creating key:', err);
        this.addToast('error', err instanceof Error ? err.message : 'Error al crear la clave');
      }
    },
    
    resetNewKeyForm() {
      this.newKey = {
        name: '',
        description: '',
        allIndexes: false,
        allActions: false,
        selectedIndexes: this.availableIndexes.map(index => index.uid),
        selectedActions: [],
        expiresAt: '',
      };
    },
    
    toggleAllIndexes() {
      if (this.newKey.allIndexes) {
        this.newKey.selectedIndexes = this.availableIndexes.map(index => index.uid);
      } else {
        this.newKey.selectedIndexes = [];
      }
    },
    
    toggleAllActions() {
      if (this.newKey.allActions) {
        this.newKey.selectedActions = this.availableActions.map(action => action.value);
      } else {
        this.newKey.selectedActions = [];
      }
    },
    
    async confirmDeleteKey() {
      this.deletingKey = true;
      
      try {
        const response = await fetch('/api/keys', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ key: this.keyToDelete?.key }),
        });
        
        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.error || 'Error al eliminar la clave');
        }
        
        // Recargar claves
        await this.loadKeys();
        
        this.addToast('success', 'Clave eliminada correctamente');
        this.showDeleteModal = false;
      } catch (err: unknown) {
        console.error('Error deleting key:', err);
        this.addToast('error', err instanceof Error ? err.message : 'Error al eliminar la clave');
      } finally {
        this.deletingKey = false;
      }
    },
    
    closeDeleteModal() {
      this.showDeleteModal = false;
      this.keyToDelete = null;
    },
  });

  Alpine.data('keyListData', keyListData);
</script> 